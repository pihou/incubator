lua_package_path "/usr/local/openresty/lualib/resty/?.lua;/app/docker/?.lua;;";

init_worker_by_lua_block {
    local uuid = require 'docker.jit-uuid'
    uuid.seed()
}

upstream api {
    server 127.0.0.1:9000;
}

server {
    server_name swagger.longban.site;
    listen      80;

    access_log  /data/log/nginx.swagger.access.log  main;
    error_log   /data/log/nginx.swagger.error.log;

    location / {
        alias /app/swagger/;
    }
}

server {
    listen      80;
    server_name api.longban.site admin.longban.site localhost;
        
    rewrite_log on;
    #access_log  /data/log/nginx.api.access.log  main;
    #error_log   /data/log/nginx.api.error.log notice;
    access_log  /dev/stdout  main;
    error_log   /dev/stderr notice;
    client_max_body_size 100m;

    location / {
        include uwsgi_params;
        uwsgi_param REQUEST_METHOD $echo_request_method;
        uwsgi_pass api;

        #proxy_set_header X-Forwarded-Host $host:$server_port;
        #proxy_set_header X-Real-IP $remote_addr;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #proxy_pass http://127.0.0.1:10080;

    }
    location = /minio/upload/ {
        internal;
        resolver 127.0.0.11;

        proxy_buffering off;
        rewrite_by_lua_block {
            ngx.req.set_body_file(ngx.var.http_minio_upload_file, true)
        }
        proxy_pass $http_minio_upload_url;
    }
    location = /minio/download/ {
        internal;
        resolver 127.0.0.11;
        proxy_set_header Content-Length ""; 
        proxy_set_header Cookie ""; 

        proxy_buffering off;
        proxy_hide_header x-amz-request-id;
        proxy_hide_header x-amz-meta-uid;
        proxy_hide_header x-amz-id-2;
        proxy_hide_header x-amz-meta-mode;
        proxy_hide_header x-amz-meta-mtime;
        proxy_hide_header x-amz-meta-gid;
        proxy_hide_header x-amz-version-id;

        proxy_pass_request_body off;
        proxy_max_temp_file_size 0;
        proxy_pass $http_minio_download_url;

        header_filter_by_lua_block {
            ngx.header.content_type = ngx.var.http_content_type
            ngx.header.content_disposition = ngx.var.http_content_disposition
        }
    }
    location ~* ^(/media/resource/|/util/image/|/zone/post/|/zone/media/)$ {
        lua_code_cache off;
        content_by_lua_file /app/docker/media.lua;
    }
}

